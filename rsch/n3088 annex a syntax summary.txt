© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

Annex A

(informative)

Language syntax summary
1

NOTE 1 The notation is described in 6.1.

A.1 Lexical grammar
A.1.1 Lexical elements
(6.4) token:

keyword
identiﬁer
constant
string-literal
punctuator

(6.4) preprocessing-token:
header-name
identiﬁer
pp-number
character-constant
string-literal
punctuator
each universal-character-name that cannot be one of the above
each non-white-space character that cannot be one of the above

A.1.2

Keywords

(6.4.1) keyword: one of
alignas
alignof
auto
bool
break
case
char
const
constexpr
continue
default
do
double
else

A.1.3

enum
extern
false
float
for
goto
if
inline
int
long
nullptr
register
restrict
return

short
signed
sizeof
static
static_assert
struct
switch
thread_local
true
typedef
typeof
typeof_unqual
union
unsigned

void
volatile
while
_Atomic
_BitInt
_Complex
_Decimal128
_Decimal32
_Decimal64
_Generic
_Imaginary
_Noreturn

Identiﬁers

(6.4.2.1) identiﬁer:

identiﬁer-start
identiﬁer identiﬁer-continue

(6.4.2.1) identiﬁer-start:
nondigit
XID_Start character
universal-character-name of class XID_Start
(6.4.2.1) identiﬁer-continue:
digit
nondigit
XID_Continue character
universal-character-name of class XID_Continue
454

Language syntax summary

§ A.1.3

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.4.2.1) nondigit: one of

_ a b c d e f g h i j k l m
n o p q r s t u v w x y z
A B C D E F G H I J K L M
N O P Q R S T U V W X Y Z

(6.4.2.1) digit: one of
0 1 2 3 4 5 6 7 8 9

A.1.4

Universal character names

(6.4.3) universal-character-name:
\u hex-quad
\U hex-quad hex-quad
(6.4.3) hex-quad:

A.1.5

hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit

Constants

(6.4.4) constant:

integer-constant
ﬂoating-constant
enumeration-constant
character-constant
predeﬁned-constant

(6.4.4.1) integer-constant:
decimal-constant integer-sufﬁxopt
octal-constant integer-sufﬁxopt
hexadecimal-constant integer-sufﬁxopt
binary-constant integer-sufﬁxopt
(6.4.4.1) decimal-constant:
nonzero-digit
decimal-constant ’opt digit
(6.4.4.1) octal-constant:
0

octal-constant ’opt octal-digit
(6.4.4.1) hexadecimal-constant:
hexadecimal-preﬁx hexadecimal-digit-sequence
(6.4.4.1) binary-constant:
binary-preﬁx binary-digit
binary-constant ’opt binary-digit
(6.4.4.1) hexadecimal-preﬁx: one of
0x 0X

(6.4.4.1) binary-preﬁx: one of
0b 0B

(6.4.4.1) nonzero-digit: one of
1 2 3 4 5 6 7 8 9

(6.4.4.1) octal-digit: one of
0 1 2 3 4 5 6 7

hexadecimal-digit-sequence:
hexadecimal-digit
hexadecimal-digit-sequence ’opt hexadecimal-digit
§ A.1.5

Language syntax summary

455

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.4.4.1) hexadecimal-digit: one of
0 1 2 3 4 5 6 7 8 9
a b c d e f
A B C D E F

(6.4.4.1) binary-digit: one of
0 1

(6.4.4.1) integer-sufﬁx:
unsigned-sufﬁx long-sufﬁxopt
unsigned-sufﬁx long-long-sufﬁx
unsigned-sufﬁx bit-precise-int-sufﬁx
long-sufﬁx unsigned-sufﬁxopt
long-long-sufﬁx unsigned-sufﬁxopt
bit-precise-int-sufﬁx unsigned-sufﬁxopt
(6.4.4.1) bit-precise-int-sufﬁx: one of
wb WB

(6.4.4.1) unsigned-sufﬁx: one of
u U

(6.4.4.1) long-sufﬁx: one of
l L

(6.4.4.1) long-long-sufﬁx: one of
ll LL

(6.4.4.2) ﬂoating-constant:
decimal-ﬂoating-constant
hexadecimal-ﬂoating-constant
(6.4.4.2) decimal-ﬂoating-constant:
fractional-constant exponent-partopt ﬂoating-sufﬁxopt
digit-sequence exponent-part ﬂoating-sufﬁxopt
(6.4.4.2) hexadecimal-ﬂoating-constant:
hexadecimal-preﬁx hexadecimal-fractional-constant
binary-exponent-part ﬂoating-sufﬁxopt
hexadecimal-preﬁx hexadecimal-digit-sequence
binary-exponent-part ﬂoating-sufﬁxopt
(6.4.4.2) fractional-constant:
digit-sequenceopt . digit-sequence
digit-sequence .
(6.4.4.2) exponent-part:
e signopt digit-sequence
E signopt digit-sequence
(6.4.4.2) sign: one of
+ -

(6.4.4.2) digit-sequence:
digit
digit-sequence ’opt digit
(6.4.4.2) hexadecimal-fractional-constant:
hexadecimal-digit-sequenceopt . hexadecimal-digit-sequence
hexadecimal-digit-sequence .
(6.4.4.2) binary-exponent-part:
p signopt digit-sequence
P signopt digit-sequence
456

Language syntax summary

§ A.1.5

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.4.4.2) ﬂoating-sufﬁx: one of
f l F L df dd dl DF DD DL

(6.4.4.3) enumeration-constant:
identiﬁer
(6.4.4.4) character-constant:
encoding-preﬁxopt ’ c-char-sequence ’
(6.4.4.4) encoding-preﬁx: one of
u8

u

U

L

(6.4.4.4) c-char-sequence:
c-char
c-char-sequence c-char
(6.4.4.4) c-char:

any member of the source character set except
the single-quote ’, backslash \, or new-line character
escape-sequence

(6.4.4.4) escape-sequence:
simple-escape-sequence
octal-escape-sequence
hexadecimal-escape-sequence
universal-character-name
(6.4.4.4) simple-escape-sequence: one of
\’ \" \? \\
\a \b \f \n \r \t \v

(6.4.4.4) octal-escape-sequence:
\ octal-digit
\ octal-digit octal-digit
\ octal-digit octal-digit octal-digit
(6.4.4.4) hexadecimal-escape-sequence:
\x hexadecimal-digit
hexadecimal-escape-sequence hexadecimal-digit
(6.4.4.5) predeﬁned-constant:
false
true
nullptr

A.1.6

String literals

(6.4.5) string-literal:
encoding-preﬁxopt " s-char-sequenceopt "
(6.4.5) s-char-sequence:
s-char
s-char-sequence s-char
(6.4.5) s-char:

§ A.1.6

any member of the source character set except
the double-quote ", backslash \, or new-line character
escape-sequence
Language syntax summary

457

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

A.1.7

Punctuators

(6.4.6) punctuator: one of
[ ] ( ) { } .
->
++ -- & * + - ~ !
/ % << >> < > <= >=
?
:
::
; ...
= *= /= %= += -= <<=
, # ##
<:
:> <% %> %:
%:%:

A.1.8

==

!=

>>=

&=

^

|
^=

&&

||

|=

Header names

(6.4.7) header-name:

< h-char-sequence >
" q-char-sequence "

(6.4.7) h-char-sequence:
h-char
h-char-sequence h-char
(6.4.7) h-char:

any member of the source character set except
the new-line character and >

(6.4.7) q-char-sequence:
q-char
q-char-sequence q-char
(6.4.7) q-char:

A.1.9

any member of the source character set except
the new-line character and "

Preprocessing numbers

(6.4.8) pp-number:

digit

. digit

pp-number identiﬁer-continue
pp-number ’ digit
pp-number ’ nondigit
pp-number e sign
pp-number E sign
pp-number p sign
pp-number P sign
pp-number .

A.2 Phrase structure grammar
A.2.1 Expressions
(6.5.1) primary-expression:
identiﬁer
constant
string-literal
( expression )
generic-selection
(6.5.1.1) generic-selection:

_Generic ( assignment-expression , generic-assoc-list )

(6.5.1.1) generic-assoc-list:
generic-association
generic-assoc-list , generic-association
458

Language syntax summary

§ A.2.1

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.5.1.1) generic-association:
type-name : assignment-expression
default : assignment-expression
(6.5.2) postﬁx-expression:
primary-expression
postﬁx-expression [ expression ]
postﬁx-expression ( argument-expression-listopt )
postﬁx-expression . identiﬁer
postﬁx-expression -> identiﬁer
postﬁx-expression ++
postﬁx-expression -compound-literal
(6.5.2) argument-expression-list:
assignment-expression
argument-expression-list , assignment-expression
(6.5.2.5)
(6.5.2.5)

compound-literal:
( storage-class-speciﬁersopt type-name ) braced-initializer
storage-class-speciﬁers:
storage-class-speciﬁer
storage-class-speciﬁers storage-class-speciﬁer

(6.5.3) unary-expression:
postﬁx-expression
++ unary-expression
-- unary-expression
unary-operator cast-expression
sizeof unary-expression
sizeof ( type-name )
alignof ( type-name )
(6.5.3) unary-operator: one of
&

*

+

-

~

!

(6.5.4) cast-expression:
unary-expression
( type-name ) cast-expression
(6.5.5) multiplicative-expression:
cast-expression
multiplicative-expression * cast-expression
multiplicative-expression / cast-expression
multiplicative-expression % cast-expression
(6.5.6) additive-expression:
multiplicative-expression
additive-expression + multiplicative-expression
additive-expression - multiplicative-expression
(6.5.7) shift-expression:
additive-expression
shift-expression << additive-expression
shift-expression >> additive-expression
(6.5.8) relational-expression:
shift-expression
relational-expression < shift-expression
relational-expression > shift-expression
relational-expression <= shift-expression
relational-expression >= shift-expression
§ A.2.1

Language syntax summary

459

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.5.9) equality-expression:
relational-expression
equality-expression == relational-expression
equality-expression != relational-expression
(6.5.10) AND-expression:
equality-expression
AND-expression & equality-expression
(6.5.11) exclusive-OR-expression:
AND-expression
exclusive-OR-expression ^ AND-expression
(6.5.12) inclusive-OR-expression:
exclusive-OR-expression
inclusive-OR-expression | exclusive-OR-expression
(6.5.13) logical-AND-expression:
inclusive-OR-expression
logical-AND-expression && inclusive-OR-expression
(6.5.14) logical-OR-expression:
logical-AND-expression
logical-OR-expression || logical-AND-expression
(6.5.15) conditional-expression:
logical-OR-expression
logical-OR-expression ? expression : conditional-expression
(6.5.16) assignment-expression:
conditional-expression
unary-expression assignment-operator assignment-expression
(6.5.16) assignment-operator: one of
=

(6.5.17) expression:

*=

/=

%=

+=

-=

<<=

>>=

&=

^=

|=

assignment-expression
expression , assignment-expression

(6.6) constant-expression:
conditional-expression

A.2.2

Declarations

(6.7) declaration:

declaration-speciﬁers init-declarator-listopt ;
attribute-speciﬁer-sequence declaration-speciﬁers init-declarator-list ;
static_assert-declaration
attribute-declaration

(6.7) declaration-speciﬁers:
declaration-speciﬁer attribute-speciﬁer-sequenceopt
declaration-speciﬁer declaration-speciﬁers
(6.7) declaration-speciﬁer:
storage-class-speciﬁer
type-speciﬁer-qualiﬁer
function-speciﬁer
(6.7) init-declarator-list:
init-declarator
init-declarator-list , init-declarator
460

Language syntax summary

§ A.2.2

© ISO/IEC 2023 – All rights reserved

(6.7) init-declarator:

ISO/IEC 9899:2023 (E)

declarator
declarator = initializer

(6.7) attribute-declaration:
attribute-speciﬁer-sequence ;
(6.7.1) storage-class-speciﬁer:
auto
constexpr
extern
register
static
thread_local
typedef

(6.7.2) type-speciﬁer:
void
char
short
int
long
float
double
signed
unsigned
_BitInt ( constant-expression )
bool
_Complex
_Decimal32
_Decimal64
_Decimal128

atomic-type-speciﬁer
struct-or-union-speciﬁer
enum-speciﬁer
typedef-name
typeof-speciﬁer
(6.7.2.1) struct-or-union-speciﬁer:
struct-or-union attribute-speciﬁer-sequenceopt identiﬁeropt { member-declaration-list }
struct-or-union attribute-speciﬁer-sequenceopt identiﬁer
(6.7.2.1) struct-or-union:
struct
union

[-2ex]
(6.7.2.1) member-declaration-list:
member-declaration
member-declaration-list member-declaration
(6.7.2.1) member-declaration:
attribute-speciﬁer-sequenceopt speciﬁer-qualiﬁer-list member-declarator-listopt ;
static_assert-declaration
(6.7.2.1) speciﬁer-qualiﬁer-list:
type-speciﬁer-qualiﬁer attribute-speciﬁer-sequenceopt
type-speciﬁer-qualiﬁer speciﬁer-qualiﬁer-list
§ A.2.2

Language syntax summary

461

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.7.2.1) type-speciﬁer-qualiﬁer:
type-speciﬁer
type-qualiﬁer
alignment-speciﬁer
(6.7.2.1) member-declarator-list:
member-declarator
member-declarator-list , member-declarator
(6.7.2.1) member-declarator:
declarator
declaratoropt : constant-expression
(6.7.2.2) enum-speciﬁer:

enum attribute-speciﬁer-sequenceopt identiﬁeropt enum-type-speciﬁeropt
{ enumerator-list }
enum attribute-speciﬁer-sequenceopt identiﬁeropt enum-type-speciﬁeropt
{ enumerator-list , }
enum identiﬁer enum-type-speciﬁeropt

(6.7.2.2) enumerator-list:
enumerator
enumerator-list , enumerator
(6.7.2.2) enumerator:
enumeration-constant attribute-speciﬁer-sequenceopt
enumeration-constant attribute-speciﬁer-sequenceopt = constant-expression
(6.7.2.2) enum-type-speciﬁer:
: speciﬁer-qualiﬁer-list
(6.7.2.4) atomic-type-speciﬁer:

_Atomic ( type-name )

(6.7.2.5) typeof-speciﬁer:

typeof ( typeof-speciﬁer-argument )
typeof_unqual ( typeof-speciﬁer-argument )

(6.7.2.5) typeof-speciﬁer-argument:
expression
type-name
(6.7.3) type-qualiﬁer:
const
restrict
volatile
_Atomic

(6.7.4) function-speciﬁer:
inline
_Noreturn

[-7ex]
(6.7.5) alignment-speciﬁer:

alignas ( type-name )
alignas ( constant-expression )

(6.7.6) declarator:

pointeropt direct-declarator

(6.7.6) direct-declarator:
identiﬁer attribute-speciﬁer-sequenceopt
( declarator )
array-declarator attribute-speciﬁer-sequenceopt
function-declarator attribute-speciﬁer-sequenceopt
462

Language syntax summary

§ A.2.2

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.7.6) array-declarator:
direct-declarator [ type-qualiﬁer-listopt assignment-expressionopt ]
direct-declarator [ static type-qualiﬁer-listopt assignment-expression ]
direct-declarator [ type-qualiﬁer-list static assignment-expression ]
direct-declarator [ type-qualiﬁer-listopt * ]
(6.7.6) function-declarator:
direct-declarator ( parameter-type-listopt )
(6.7.6) pointer:

* attribute-speciﬁer-sequenceopt type-qualiﬁer-listopt
* attribute-speciﬁer-sequenceopt type-qualiﬁer-listopt pointer

(6.7.6) type-qualiﬁer-list:
type-qualiﬁer
type-qualiﬁer-list type-qualiﬁer
(6.7.6) parameter-type-list:
parameter-list
parameter-list , ...
...

(6.7.6) parameter-list:
parameter-declaration
parameter-list , parameter-declaration
(6.7.6) parameter-declaration:
attribute-speciﬁer-sequenceopt declaration-speciﬁers declarator
attribute-speciﬁer-sequenceopt declaration-speciﬁers abstract-declaratoropt
(6.7.7) type-name:

speciﬁer-qualiﬁer-list abstract-declaratoropt

(6.7.7) abstract-declarator:
pointer
pointeropt direct-abstract-declarator
(6.7.7) direct-abstract-declarator:
( abstract-declarator )
array-abstract-declarator attribute-speciﬁer-sequenceopt
function-abstract-declarator attribute-speciﬁer-sequenceopt
(6.7.7) array-abstract-declarator:
direct-abstract-declaratoropt [ type-qualiﬁer-listopt assignment-expressionopt ]
direct-abstract-declaratoropt [ static type-qualiﬁer-listopt assignment-expression ]
direct-abstract-declaratoropt [ type-qualiﬁer-list static assignment-expression ]
direct-abstract-declaratoropt [ * ]
(6.7.7) function-abstract-declarator:
direct-abstract-declaratoropt ( parameter-type-listopt )
(6.7.8) typedef-name:
identiﬁer
(6.7.10) braced-initializer:

(6.7.10) initializer:

{ }
{ initializer-list }
{ initializer-list , }

assignment-expression
braced-initializer

(6.7.10) initializer-list:
designationopt initializer
initializer-list , designationopt initializer
§ A.2.2

Language syntax summary

463

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.7.10) designation:
designator-list =
(6.7.10) designator-list:
designator
designator-list designator
(6.7.10) designator:

[ constant-expression ]
. identiﬁer

(6.7.11) static_assert-declaration:

static_assert ( constant-expression , string-literal ) ;
static_assert ( constant-expression ) ;

(6.7.12.1) attribute-speciﬁer-sequence:
attribute-speciﬁer-sequenceopt attribute-speciﬁer
(6.7.12.1) attribute-speciﬁer:
[ [ attribute-list ] ]
(6.7.12.1) attribute-list:
attributeopt
attribute-list , attributeopt
(6.7.12.1) attribute:

attribute-token attribute-argument-clauseopt

(6.7.12.1) attribute-token:
standard-attribute
attribute-preﬁxed-token
(6.7.12.1) standard-attribute:
identiﬁer
(6.7.12.1) attribute-preﬁxed-token:
attribute-preﬁx :: identiﬁer
(6.7.12.1) attribute-preﬁx:
identiﬁer
(6.7.12.1) attribute-argument-clause:
( balanced-token-sequenceopt )
(6.7.12.1) balanced-token-sequence:
balanced-token
balanced-token-sequence balanced-token
(6.7.12.1) balanced-token:
( balanced-token-sequenceopt )
[ balanced-token-sequenceopt ]
{ balanced-token-sequenceopt }
any token other than a parenthesis, a bracket, or a brace

A.2.3

Statements

(6.8) statement:

labeled-statement
unlabeled-statement

(6.8) unlabeled-statement:
expression-statement
attribute-speciﬁer-sequenceopt primary-block
attribute-speciﬁer-sequenceopt jump-statement
464

Language syntax summary

§ A.2.3

© ISO/IEC 2023 – All rights reserved

(6.8) primary-block:

ISO/IEC 9899:2023 (E)

compound-statement
selection-statement
iteration-statement

(6.8) secondary-block:
statement
(6.8.1) label:

attribute-speciﬁer-sequenceopt identiﬁer :
attribute-speciﬁer-sequenceopt case constant-expression :
attribute-speciﬁer-sequenceopt default :

(6.8.1) labeled-statement:
label statement
(6.8.2) compound-statement:
{ block-item-listopt }
(6.8.2) block-item-list:
block-item
block-item-list block-item
(6.8.2) block-item:

declaration
unlabeled-statement
label

(6.8.3) expression-statement:
expressionopt ;
attribute-speciﬁer-sequence expression ;
[-6ex]
(6.8.4) selection-statement:
if ( expression ) secondary-block
if ( expression ) secondary-block else secondary-block
switch ( expression ) secondary-block
[-6ex]
(6.8.5) iteration-statement:

[-6ex]

while ( expression ) secondary-block
do secondary-block while ( expression ) ;
for ( expressionopt ; expressionopt ; expressionopt ) secondary-block
for ( declaration expressionopt ; expressionopt ) secondary-block

(6.8.6) jump-statement:

[-6ex]

A.2.4

goto identiﬁer ;
continue ;
break ;
return expressionopt ;

External deﬁnitions

(6.9) translation-unit:
external-declaration
translation-unit external-declaration
(6.9) external-declaration:
function-deﬁnition
declaration
§ A.2.4

Language syntax summary

465

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.9.1) function-deﬁnition:
attribute-speciﬁer-sequenceopt declaration-speciﬁers declarator function-body
(6.9.1) function-body:
compound-statement

A.3

Preprocessing directives

(6.10) preprocessing-ﬁle:
groupopt
(6.10) group:

(6.10) group-part:

(6.10) if-section:
(6.10) if-group:

(6.10) elif-groups:

(6.10) elif-group:

(6.10) else-group:
(6.10) endif-line:
(6.10) control-line:

(6.10) text-line:
(6.10) non-directive:

466

group-part
group group-part
if-section
control-line
text-line
# non-directive
if-group elif-groupsopt else-groupopt endif-line
# if constant-expression new-line groupopt
# ifdef identiﬁer new-line groupopt
# ifndef identiﬁer new-line groupopt

elif-group
elif-groups elif-group
# elif constant-expression new-line groupopt
# elifdef identiﬁer new-line groupopt
# elifndef identiﬁer new-line groupopt
# else new-line groupopt
# endif new-line
# include pp-tokens new-line
# embed pp-tokens new-line
# define identiﬁer replacement-list new-line
# define identiﬁer lparen identiﬁer-listopt ) replacement-list new-line
# define identiﬁer lparen ... ) replacement-list new-line
# define identiﬁer lparen identiﬁer-list , ... ) replacement-list new-line
# undef identiﬁer new-line
# line pp-tokens new-line
# error pp-tokensopt new-line
# warning pp-tokensopt new-line
# pragma pp-tokensopt new-line
# new-line

pp-tokensopt new-line
pp-tokens new-line
Language syntax summary

§ A.3

© ISO/IEC 2023 – All rights reserved

(6.10) lparen:

ISO/IEC 9899:2023 (E)

a ( character not immediately preceded by white space

(6.10) replacement-list:
pp-tokensopt
(6.10) pp-tokens:

(6.10) new-line:

preprocessing-token
pp-tokens preprocessing-token

the new-line character

(6.10) identiﬁer-list:

(6.10) pp-parameter:

identiﬁer
identiﬁer-list , identiﬁer

pp-parameter-name pp-parameter-clauseopt

(6.10) pp-parameter-name:
pp-standard-parameter
pp-preﬁxed-parameter
(6.10) pp-standard-parameter:
identiﬁer
(6.10) pp-preﬁxed-parameter:
identiﬁer :: identiﬁer
(6.10) pp-parameter-clause:
( pp-balanced-token-sequenceopt )
(6.10) pp-balanced-token-sequence:
pp-balanced-token
pp-balanced-token-sequence pp-balanced-token
(6.10) pp-balanced-token:
( pp-balanced-token-sequenceopt )
[ pp-balanced-token-sequenceopt ]
{ pp-balanced-token-sequenceopt }
any pp-token other than a parenthesis, a bracket, or a brace
(6.10) embed-parameter-sequence:
pp-parameter
embed-parameter-sequence pp-parameter
§ A.3

Language syntax summary

467

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

deﬁned-macro-expression:

defined identiﬁer
defined ( identiﬁer )

h-preprocessing-token:
any preprocessing-token other than >
h-pp-tokens:
h-preprocessing-token
h-pp-tokens h-preprocessing-token
header-name-tokens:
string-literal
< h-pp-tokens >
has-include-expression:
__has_include ( header-name )
__has_include ( header-name-tokens )
has-embed-expression:
__has_embed ( header-name embed-parameter-sequenceopt )
__has_embed ( header-name-tokens pp-balanced-token-sequenceopt )
has-c-attribute-express:
__has_c_attribute ( pp-tokens )
va-opt-replacement:

__VA_OPT__ ( pp-tokensopt )

(6.10.7) standard-pragma:

# pragma STDC FP_CONTRACT on-off-switch
# pragma STDC FENV_ACCESS on-off-switch
# pragma STDC FENV_DEC_ROUND dec-direction
# pragma STDC FENV_ROUND direction
# pragma STDC CX_LIMITED_RANGE on-off-switch

(6.10.7) on-off-switch: one of
ON

OFF

(6.10.7) direction: one of

DEFAULT

FE_DOWNWARD
FE_TOWARDZERO

FE_TONEAREST
FE_UPWARD

(6.10.7) dec-direction: one of

FE_DEC_DOWNWARD
FE_DEC_TOWARDZERO

FE_TONEARESTFROMZERO
FE_DYNAMIC

FE_DEC_TONEAREST
FE_DEC_UPWARD

FE_DEC_TONEARESTFROMZERO
FE_DEC_DYNAMIC

A.4 Floating-point subject sequence
A.4.1 NaN char sequence
(7.24.1.5)

A.4.2

n-char-sequence:
digit
nondigit
n-char-sequence digit
n-char-sequence nondigit

NaN wchar_t sequence

(7.31.4.1.2)

468

n-wchar-sequence:
digit
nondigit
n-wchar-sequence digit
n-wchar-sequence nondigit
Language syntax summary

§ A.4.2

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

A.5 Decimal ﬂoating-point subject sequence
A.5.1 NaN decimal char sequence
(7.24.1.6)

d-char-sequence:
digit
nondigit
d-char-sequence digit
d-char-sequence nondigit

A.5.2

NaN decimal wchar_t sequence

(7.31.4.1.3)

§ A.5.2

d-wchar-sequence:
digit
nondigit
d-wchar-sequence digit
d-wchar-sequence nondigit

Language syntax summary

469

