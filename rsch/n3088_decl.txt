© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.5.9) equality-expression:
relational-expression
equality-expression == relational-expression
equality-expression != relational-expression
(6.5.10) AND-expression:
equality-expression
AND-expression & equality-expression
(6.5.11) exclusive-OR-expression:
AND-expression
exclusive-OR-expression ^ AND-expression
(6.5.12) inclusive-OR-expression:
exclusive-OR-expression
inclusive-OR-expression | exclusive-OR-expression
(6.5.13) logical-AND-expression:
inclusive-OR-expression
logical-AND-expression && inclusive-OR-expression
(6.5.14) logical-OR-expression:
logical-AND-expression
logical-OR-expression || logical-AND-expression
(6.5.15) conditional-expression:
logical-OR-expression
logical-OR-expression ? expression : conditional-expression
(6.5.16) assignment-expression:
conditional-expression
unary-expression assignment-operator assignment-expression
(6.5.16) assignment-operator: one of
=

(6.5.17) expression:

*=

/=

%=

+=

-=

<<=

>>=

&=

^=

|=

assignment-expression
expression , assignment-expression

(6.6) constant-expression:
conditional-expression

A.2.2

Declarations

(6.7) declaration:

declaration-speciﬁers init-declarator-listopt ;
attribute-speciﬁer-sequence declaration-speciﬁers init-declarator-list ;
static_assert-declaration
attribute-declaration

(6.7) declaration-speciﬁers:
declaration-speciﬁer attribute-speciﬁer-sequenceopt
declaration-speciﬁer declaration-speciﬁers
(6.7) declaration-speciﬁer:
storage-class-speciﬁer
type-speciﬁer-qualiﬁer
function-speciﬁer
(6.7) init-declarator-list:
init-declarator
init-declarator-list , init-declarator
460

Language syntax summary

§ A.2.2

© ISO/IEC 2023 – All rights reserved

(6.7) init-declarator:

ISO/IEC 9899:2023 (E)

declarator
declarator = initializer

(6.7) attribute-declaration:
attribute-speciﬁer-sequence ;
(6.7.1) storage-class-speciﬁer:
auto
constexpr
extern
register
static
thread_local
typedef

(6.7.2) type-speciﬁer:
void
char
short
int
long
float
double
signed
unsigned
_BitInt ( constant-expression )
bool
_Complex
_Decimal32
_Decimal64
_Decimal128

atomic-type-speciﬁer
struct-or-union-speciﬁer
enum-speciﬁer
typedef-name
typeof-speciﬁer
(6.7.2.1) struct-or-union-speciﬁer:
struct-or-union attribute-speciﬁer-sequenceopt identiﬁeropt { member-declaration-list }
struct-or-union attribute-speciﬁer-sequenceopt identiﬁer
(6.7.2.1) struct-or-union:
struct
union

[-2ex]
(6.7.2.1) member-declaration-list:
member-declaration
member-declaration-list member-declaration
(6.7.2.1) member-declaration:
attribute-speciﬁer-sequenceopt speciﬁer-qualiﬁer-list member-declarator-listopt ;
static_assert-declaration
(6.7.2.1) speciﬁer-qualiﬁer-list:
type-speciﬁer-qualiﬁer attribute-speciﬁer-sequenceopt
type-speciﬁer-qualiﬁer speciﬁer-qualiﬁer-list
§ A.2.2

Language syntax summary

461

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.7.2.1) type-speciﬁer-qualiﬁer:
type-speciﬁer
type-qualiﬁer
alignment-speciﬁer
(6.7.2.1) member-declarator-list:
member-declarator
member-declarator-list , member-declarator
(6.7.2.1) member-declarator:
declarator
declaratoropt : constant-expression
(6.7.2.2) enum-speciﬁer:

enum attribute-speciﬁer-sequenceopt identiﬁeropt enum-type-speciﬁeropt
{ enumerator-list }
enum attribute-speciﬁer-sequenceopt identiﬁeropt enum-type-speciﬁeropt
{ enumerator-list , }
enum identiﬁer enum-type-speciﬁeropt

(6.7.2.2) enumerator-list:
enumerator
enumerator-list , enumerator
(6.7.2.2) enumerator:
enumeration-constant attribute-speciﬁer-sequenceopt
enumeration-constant attribute-speciﬁer-sequenceopt = constant-expression
(6.7.2.2) enum-type-speciﬁer:
: speciﬁer-qualiﬁer-list
(6.7.2.4) atomic-type-speciﬁer:

_Atomic ( type-name )

(6.7.2.5) typeof-speciﬁer:

typeof ( typeof-speciﬁer-argument )
typeof_unqual ( typeof-speciﬁer-argument )

(6.7.2.5) typeof-speciﬁer-argument:
expression
type-name
(6.7.3) type-qualiﬁer:
const
restrict
volatile
_Atomic

(6.7.4) function-speciﬁer:
inline
_Noreturn

[-7ex]
(6.7.5) alignment-speciﬁer:

alignas ( type-name )
alignas ( constant-expression )

(6.7.6) declarator:

pointeropt direct-declarator

(6.7.6) direct-declarator:
identiﬁer attribute-speciﬁer-sequenceopt
( declarator )
array-declarator attribute-speciﬁer-sequenceopt
function-declarator attribute-speciﬁer-sequenceopt
462

Language syntax summary

§ A.2.2

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.7.6) array-declarator:
direct-declarator [ type-qualiﬁer-listopt assignment-expressionopt ]
direct-declarator [ static type-qualiﬁer-listopt assignment-expression ]
direct-declarator [ type-qualiﬁer-list static assignment-expression ]
direct-declarator [ type-qualiﬁer-listopt * ]
(6.7.6) function-declarator:
direct-declarator ( parameter-type-listopt )
(6.7.6) pointer:

* attribute-speciﬁer-sequenceopt type-qualiﬁer-listopt
* attribute-speciﬁer-sequenceopt type-qualiﬁer-listopt pointer

(6.7.6) type-qualiﬁer-list:
type-qualiﬁer
type-qualiﬁer-list type-qualiﬁer
(6.7.6) parameter-type-list:
parameter-list
parameter-list , ...
...

(6.7.6) parameter-list:
parameter-declaration
parameter-list , parameter-declaration
(6.7.6) parameter-declaration:
attribute-speciﬁer-sequenceopt declaration-speciﬁers declarator
attribute-speciﬁer-sequenceopt declaration-speciﬁers abstract-declaratoropt
(6.7.7) type-name:

speciﬁer-qualiﬁer-list abstract-declaratoropt

(6.7.7) abstract-declarator:
pointer
pointeropt direct-abstract-declarator
(6.7.7) direct-abstract-declarator:
( abstract-declarator )
array-abstract-declarator attribute-speciﬁer-sequenceopt
function-abstract-declarator attribute-speciﬁer-sequenceopt
(6.7.7) array-abstract-declarator:
direct-abstract-declaratoropt [ type-qualiﬁer-listopt assignment-expressionopt ]
direct-abstract-declaratoropt [ static type-qualiﬁer-listopt assignment-expression ]
direct-abstract-declaratoropt [ type-qualiﬁer-list static assignment-expression ]
direct-abstract-declaratoropt [ * ]
(6.7.7) function-abstract-declarator:
direct-abstract-declaratoropt ( parameter-type-listopt )
(6.7.8) typedef-name:
identiﬁer
(6.7.10) braced-initializer:

(6.7.10) initializer:

{ }
{ initializer-list }
{ initializer-list , }

assignment-expression
braced-initializer

(6.7.10) initializer-list:
designationopt initializer
initializer-list , designationopt initializer
§ A.2.2

Language syntax summary

463

© ISO/IEC 2023 – All rights reserved

ISO/IEC 9899:2023 (E)

(6.7.10) designation:
designator-list =
(6.7.10) designator-list:
designator
designator-list designator
(6.7.10) designator:

[ constant-expression ]
. identiﬁer

(6.7.11) static_assert-declaration:

static_assert ( constant-expression , string-literal ) ;
static_assert ( constant-expression ) ;

(6.7.12.1) attribute-speciﬁer-sequence:
attribute-speciﬁer-sequenceopt attribute-speciﬁer
(6.7.12.1) attribute-speciﬁer:
[ [ attribute-list ] ]
(6.7.12.1) attribute-list:
attributeopt
attribute-list , attributeopt
(6.7.12.1) attribute:

attribute-token attribute-argument-clauseopt

(6.7.12.1) attribute-token:
standard-attribute
attribute-preﬁxed-token
(6.7.12.1) standard-attribute:
identiﬁer
(6.7.12.1) attribute-preﬁxed-token:
attribute-preﬁx :: identiﬁer
(6.7.12.1) attribute-preﬁx:
identiﬁer
(6.7.12.1) attribute-argument-clause:
( balanced-token-sequenceopt )
(6.7.12.1) balanced-token-sequence:
balanced-token
balanced-token-sequence balanced-token
(6.7.12.1) balanced-token:
( balanced-token-sequenceopt )
[ balanced-token-sequenceopt ]
{ balanced-token-sequenceopt }
any token other than a parenthesis, a bracket, or a brace

A.2.3

Statements

(6.8) statement:

labeled-statement
unlabeled-statement

(6.8) unlabeled-statement:
expression-statement
attribute-speciﬁer-sequenceopt primary-block
attribute-speciﬁer-sequenceopt jump-statement
464

Language syntax summary

§ A.2.3

